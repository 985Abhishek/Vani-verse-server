// // D:\Vani-Verse Server\node_modules\express-mongo-sanitize\index.js:122 next(); ^

// // TypeError: next is not a function at Function.use (D:\Vani-Verse Server\node_modules\express-mongo-sanitize\index.js:122:5)D:\Vani-Verse Server\node_modules\express-mongo-sanitize\index.js:122 next(); ^

// // TypeError: next is not a function at Function.use (D:\Vani-Verse Server\node_modules\express-mongo-sanitize\index.js:122:5)


// // The error message you're seeing is a TypeError indicating that next is not a function. This error is occurring in the express-mongo-sanitize module, specifically at line 122 in the index.js file.

// // The next function is a middleware function that is typically passed as an argument to the use method in Express.js. It appears that the express-mongo-sanitize module is expecting a next function to be passed as an argument, but it is not being provided.


// // // to solve this error i.ve jsut commnetned the nest.js() in line 121 may be at express-mongo-sanitize\index.js:122 next();



// // // password mongo= MsGeP4qKltGqAZil,  new one = cZSXxx8nVMZQkxqq
// // // user 2 = abhishek , password = 1496Dhange2011#

// //sendergrid recovery code = MBJHG1WHX13MQ27JDTFNV67S


// // auth contoller


// // controllers carry all themajor task like business logic
// const jwt = require("jsonwebtoken");
// const otpGenerator = require("otp-generator");
// const mailService = require("../services/mailer");
// const crypto = require("crypto");
// const filterObj = require("../utils/filterObj")
// const User = require("../models/user");
// const { promisify } = require("util");

// const signToken = (userId) => jwt.sign({ userId }, process.env.JWT_SECRET);

// // Register enpoints New User

// exports.register = async (req, res, next) => {
//   const { firstName, lastName, email, password } = req.body;

//   const filteredBody = filterObj(
//     req.body,
//     "firstName",
//     "lastName",
//     "email",
//     "password"
//   );
//   // check if a verified user with given email exists

//   const existing_user = await User.findOne({ email: email });

//   if (existing_user && existing_user.verified) {
//     res.status(400).json({
//       status: "error",
//       message: "Email is already in use, please login.",
//     });
//   } else if (existing_user) {

//     await User.findOneAndUpdate({ email: email }, filteredBody, {
//       new: true,
//       validateModifiedOnly: true,
//     });
//     req.userId = existing_user._id;

//     next();
//   } else {
//     // if user havent created an account in db

//     const new_user = await User.create(filteredBody);
//     //   generate OTP and send email to user
//     req.userId = new_user._id;
//     next();
//   }
// };

// exports.sendOTP = async (req, res, next) => {
//   const { userId } = req;
//   const new_otp = otpGenerator.generate(6, {
//     lowerCaseAlphabets: false,
//     upperCaseAlphabets: false,
//     specialChars: false,
//   });

//   const otp_expiry_time = Date.now() + 10 * 60 * 1000; // 10 mins after otp sent 10*60*1000 to convert 10 min in miliseconds
//   const user = await User.findByIdAndUpdate(userId, {
//     otp_expiry_time,
//   });
// user.otp = new_otp.toString();

// await user.save({ new: true, validateModifiedOnly: true});

// console.log(new_otp);
//   // send mail
//   mailService.sendEmail({
//     from: "abhishekdhange@gmail.com",
//     to: user.email,
//     subject: "Verification OTP",
//     html: otp(user.firstName, new_otp),
//     attachments: [],
//   });

//   res.status(200).json({
//     status: "success",
//     message: "OTP sent successfully!",
//   });
// };
// exports.verifyOTP = async (req, res, next) => {
//   // verify otp and update user records accoridngly
//   const { email, otp } = req.body;
//   const user = await user.findOne({
//     email,
//     otp_expiry_time: { $gt: Date.now() },
//   });
//   if (!user) {
//     res.status(400).json({
//       status: "error",
//       message: "Email is invalid or otp is expired",
//     });
//   }
//   if (!(await user.correctOTP(otp, user.otp))) {
//     res.status(404).json({
//       status: "error",
//       message: "OTP is Incorrect",
//     });
//     // otp is correct
//   }
//   user.verified = true;
//   user.otp = undefined;
//   await user.save({ new: true, validateModifiedOnly: true });

//   const token = signToken(user._id);

//   res.status(200).json({
//     status: "success",
//     message: "OTP verified successfully",
//     token,
//   });
// };

// exports.login = async (req, res, next) => {
//   const { email, passowrd } = req.body;

//   if (!email || !passowrd) {
//     res.status(400).json({
//       status: "error",
//       message: "Both email and password are required",
//     });
//   }

//   // query to find that one user in db with findone

//   const userDoc = await User.findOne({ email: email }).select("+password");

//   // to check if given email is  not present in the db then we throw an error with a mesage we'll do the same for password but for that we'll have to make a method in user.js

//   if (
//     !userDoc ||
//     !(await userDoc.correctPassword(passowrd, userDoc.password))
//   ) {
//     res.status(400).json({
//       status: "error",
//       message: "Password is incorrect",
//     });
//   }

//   const token = signToken(userDoc._id);

//   res.status(200).json({
//     status: "success",
//     message: "Logged in successfully",
//     token,
//   });
// };
// exports.protect = async (req, res, next) => {
//   // 1 get users email
//   let token;

//   if (
//     req.headers.authorization &&
//     req.headers.authorization.startWith("Bearer")
//   ) {
//     token = req.headers.authorization.split(" ")[1];
//   } else if (req.cookies.jwt) {
//     token = req.cookies.jwt;
//   } else {
//     res.status(400).json({
//       status: "error",
//       message: "You are not logged In! Please log in to get access",
//     });
//     return;
//   }
//   // 2verification of token
//   const decoded = await promisify(jwt.verify)(token, process.env.JWT - SECRET);
//   //3 check if user still exist
//   const this_user = await User.findbyId(decoded.userId);
//   if (!this_user) {
//     res.status(400).json({
//       status: "error",
//       message: "The user doesn't exist",
//     });
//   }

//   // 4 check if user changed their password after token was issued
//   if (this_user.ChangedPasswordAfter(decoded.iat)) {
//     res.status(400).json({
//       status: "success",
//       message: "User recently changed password! Please login again",
//     });
//   }

//   req.user = this_user;
//   next();
// };
// exports.forgotPassword = async (req, res, next) => {
//   // 1. get users email
//   const user = await user.findOne({ email: req.body.email });
//   if (!user) {
//     res.status(200).json({
//       status: "error",
//       message: "There is no user with given email address",
//     });
//     return;
//   }
//   // 2 generate the random resset token
//   const resetToken = user.createPasswordResetToken();
//   const resetURL = `https://tawk.com/auth/reset-password/?code=${resetToken}`;
//   try {
//     res.status(200).json({
//       status: "error",
//       message: "Reset Password link sent to Email",
//     });
//   } catch (error) {
//     user.passwordResetToken = undefined;
//     user.passwordResetExpires = undefined;

//     await user.save({ validateBeforeSave: false });
//     res.status(500).json({
//       status: "error",
//       message: " There was an error sending the email, Please try again later",
//     });
//   }
// };
// exports.resetPassword = async (req, res, next) => {
//   // 1 get user based on token
//   const hashedToken = crypto
//     .createHash("abh256")
//     .update(req.params.token)
//     .digest("hex");
//   const user = await user.finOne({
//     passwordResetToken: hashedToken,
//     passwordResetExpires: { $gt: Date.now() },
//   });
//   // 2 if token has expired or submission is of time window
//   if (!user) {
//     res.status(400).json({
//       status: "error",
//       message: "Token is Invalid or Expired",
//     });
//     return;
//   }
//   // 3update users password and set resettoken & expiry to undefined
//   user.password = req.body.password;
//   user.passwordConfirm = req.body.passwordConfirm;
//   user.passwordResetToken = undefined;
//   user.passwordResetExpires = undefined;
//   await user.save();
//   //  4 log in the user and send new jwt
//   // todo send an email to user informing about password reset

//   const signToken = user._id;

//   res.status(200).json({
//     status: "success",
//     message: "Password Rested successfully",
//     token,
//   });
// };
